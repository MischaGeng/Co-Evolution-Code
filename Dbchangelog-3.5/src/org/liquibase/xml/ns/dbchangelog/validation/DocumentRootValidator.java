/**
 *
 * $Id$
 */
package org.liquibase.xml.ns.dbchangelog.validation;

import org.eclipse.emf.common.util.EMap;

import org.eclipse.emf.ecore.EObject;

import org.eclipse.emf.ecore.util.FeatureMap;

import org.liquibase.xml.ns.dbchangelog.AddAutoIncrementType;
import org.liquibase.xml.ns.dbchangelog.AddColumnType;
import org.liquibase.xml.ns.dbchangelog.AddDefaultValueType;
import org.liquibase.xml.ns.dbchangelog.AddForeignKeyConstraintType;
import org.liquibase.xml.ns.dbchangelog.AddLookupTableType;
import org.liquibase.xml.ns.dbchangelog.AddNotNullConstraintType;
import org.liquibase.xml.ns.dbchangelog.AddPrimaryKeyType;
import org.liquibase.xml.ns.dbchangelog.AddUniqueConstraintType;
import org.liquibase.xml.ns.dbchangelog.AlterSequenceType;
import org.liquibase.xml.ns.dbchangelog.AndType;
import org.liquibase.xml.ns.dbchangelog.ChangeLogPropertyDefinedType;
import org.liquibase.xml.ns.dbchangelog.ChangeSetExecutedType;
import org.liquibase.xml.ns.dbchangelog.ColumnExistsType;
import org.liquibase.xml.ns.dbchangelog.ColumnType2;
import org.liquibase.xml.ns.dbchangelog.ConstraintsType;
import org.liquibase.xml.ns.dbchangelog.CreateIndexType;
import org.liquibase.xml.ns.dbchangelog.CreateProcedureType;
import org.liquibase.xml.ns.dbchangelog.CreateSequenceType;
import org.liquibase.xml.ns.dbchangelog.CreateTableType;
import org.liquibase.xml.ns.dbchangelog.CreateViewType;
import org.liquibase.xml.ns.dbchangelog.CustomChangeType;
import org.liquibase.xml.ns.dbchangelog.CustomPreconditionType;
import org.liquibase.xml.ns.dbchangelog.DatabaseChangeLogType;
import org.liquibase.xml.ns.dbchangelog.DbmsType;
import org.liquibase.xml.ns.dbchangelog.DeleteType;
import org.liquibase.xml.ns.dbchangelog.DropAllForeignKeyConstraintsType;
import org.liquibase.xml.ns.dbchangelog.DropColumnType;
import org.liquibase.xml.ns.dbchangelog.DropDefaultValueType;
import org.liquibase.xml.ns.dbchangelog.DropForeignKeyConstraintType;
import org.liquibase.xml.ns.dbchangelog.DropIndexType;
import org.liquibase.xml.ns.dbchangelog.DropNotNullConstraintType;
import org.liquibase.xml.ns.dbchangelog.DropPrimaryKeyType;
import org.liquibase.xml.ns.dbchangelog.DropProcedureType;
import org.liquibase.xml.ns.dbchangelog.DropSequenceType;
import org.liquibase.xml.ns.dbchangelog.DropTableType;
import org.liquibase.xml.ns.dbchangelog.DropUniqueConstraintType;
import org.liquibase.xml.ns.dbchangelog.DropViewType;
import org.liquibase.xml.ns.dbchangelog.ExecuteCommandType;
import org.liquibase.xml.ns.dbchangelog.ExpectedQuotingStrategyType;
import org.liquibase.xml.ns.dbchangelog.ForeignKeyConstraintExistsType;
import org.liquibase.xml.ns.dbchangelog.IndexExistsType;
import org.liquibase.xml.ns.dbchangelog.InsertType;
import org.liquibase.xml.ns.dbchangelog.LoadDataType;
import org.liquibase.xml.ns.dbchangelog.LoadUpdateDataType;
import org.liquibase.xml.ns.dbchangelog.MergeColumnsType;
import org.liquibase.xml.ns.dbchangelog.ModifyDataTypeType;
import org.liquibase.xml.ns.dbchangelog.NotType;
import org.liquibase.xml.ns.dbchangelog.OrType;
import org.liquibase.xml.ns.dbchangelog.OutputType;
import org.liquibase.xml.ns.dbchangelog.ParamType1;
import org.liquibase.xml.ns.dbchangelog.PrimaryKeyExistsType;
import org.liquibase.xml.ns.dbchangelog.RenameColumnType;
import org.liquibase.xml.ns.dbchangelog.RenameSequenceType;
import org.liquibase.xml.ns.dbchangelog.RenameTableType;
import org.liquibase.xml.ns.dbchangelog.RenameViewType;
import org.liquibase.xml.ns.dbchangelog.RollbackType;
import org.liquibase.xml.ns.dbchangelog.RowCountType;
import org.liquibase.xml.ns.dbchangelog.RunningAsType;
import org.liquibase.xml.ns.dbchangelog.SequenceExistsType;
import org.liquibase.xml.ns.dbchangelog.SetColumnRemarksType;
import org.liquibase.xml.ns.dbchangelog.SetTableRemarksType;
import org.liquibase.xml.ns.dbchangelog.SqlCheckType;
import org.liquibase.xml.ns.dbchangelog.SqlFileType;
import org.liquibase.xml.ns.dbchangelog.SqlType;
import org.liquibase.xml.ns.dbchangelog.StopType;
import org.liquibase.xml.ns.dbchangelog.TableExistsType;
import org.liquibase.xml.ns.dbchangelog.TableIsEmptyType;
import org.liquibase.xml.ns.dbchangelog.TagDatabaseType;
import org.liquibase.xml.ns.dbchangelog.UpdateType;
import org.liquibase.xml.ns.dbchangelog.ViewExistsType;
import org.liquibase.xml.ns.dbchangelog.WhereParamsType;

/**
 * A sample validator interface for {@link org.liquibase.xml.ns.dbchangelog.DocumentRoot}.
 * This doesn't really do anything, and it's not a real EMF artifact.
 * It was generated by the org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's code generator can be extended.
 * This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.
 */
public interface DocumentRootValidator
{
	boolean validate();

	boolean validateMixed(FeatureMap value);
	boolean validateXMLNSPrefixMap(EMap<String, String> value);
	boolean validateXSISchemaLocation(EMap<String, String> value);
	boolean validateAddAutoIncrement(AddAutoIncrementType value);
	boolean validateAddColumn(AddColumnType value);
	boolean validateAddDefaultValue(AddDefaultValueType value);
	boolean validateAddForeignKeyConstraint(AddForeignKeyConstraintType value);
	boolean validateAddLookupTable(AddLookupTableType value);
	boolean validateAddNotNullConstraint(AddNotNullConstraintType value);
	boolean validateAddPrimaryKey(AddPrimaryKeyType value);
	boolean validateAddUniqueConstraint(AddUniqueConstraintType value);
	boolean validateAlterSequence(AlterSequenceType value);
	boolean validateAnd(AndType value);
	boolean validateChangeLogPropertyDefined(ChangeLogPropertyDefinedType value);
	boolean validateChangeSetExecuted(ChangeSetExecutedType value);
	boolean validateColumn(ColumnType2 value);
	boolean validateColumnExists(ColumnExistsType value);
	boolean validateComment(String value);
	boolean validateConstraints(ConstraintsType value);
	boolean validateCreateIndex(CreateIndexType value);
	boolean validateCreateProcedure(CreateProcedureType value);
	boolean validateCreateSequence(CreateSequenceType value);
	boolean validateCreateTable(CreateTableType value);
	boolean validateCreateView(CreateViewType value);
	boolean validateCustomChange(CustomChangeType value);
	boolean validateCustomPrecondition(CustomPreconditionType value);
	boolean validateDatabaseChangeLog(DatabaseChangeLogType value);
	boolean validateDbms(DbmsType value);
	boolean validateDelete(DeleteType value);
	boolean validateDropAllForeignKeyConstraints(DropAllForeignKeyConstraintsType value);
	boolean validateDropColumn(DropColumnType value);
	boolean validateDropDefaultValue(DropDefaultValueType value);
	boolean validateDropForeignKeyConstraint(DropForeignKeyConstraintType value);
	boolean validateDropIndex(DropIndexType value);
	boolean validateDropNotNullConstraint(DropNotNullConstraintType value);
	boolean validateDropPrimaryKey(DropPrimaryKeyType value);
	boolean validateDropProcedure(DropProcedureType value);
	boolean validateDropSequence(DropSequenceType value);
	boolean validateDropTable(DropTableType value);
	boolean validateDropUniqueConstraint(DropUniqueConstraintType value);
	boolean validateDropView(DropViewType value);
	boolean validateEmpty(EObject value);
	boolean validateExecuteCommand(ExecuteCommandType value);
	boolean validateExpectedQuotingStrategy(ExpectedQuotingStrategyType value);
	boolean validateForeignKeyConstraintExists(ForeignKeyConstraintExistsType value);
	boolean validateIndexExists(IndexExistsType value);
	boolean validateInsert(InsertType value);
	boolean validateLoadData(LoadDataType value);
	boolean validateLoadUpdateData(LoadUpdateDataType value);
	boolean validateMergeColumns(MergeColumnsType value);
	boolean validateModifyDataType(ModifyDataTypeType value);
	boolean validateNot(NotType value);
	boolean validateOr(OrType value);
	boolean validateOutput(OutputType value);
	boolean validateParam(ParamType1 value);
	boolean validatePrimaryKeyExists(PrimaryKeyExistsType value);
	boolean validateRenameColumn(RenameColumnType value);
	boolean validateRenameSequence(RenameSequenceType value);
	boolean validateRenameTable(RenameTableType value);
	boolean validateRenameView(RenameViewType value);
	boolean validateRollback(RollbackType value);
	boolean validateRowCount(RowCountType value);
	boolean validateRunningAs(RunningAsType value);
	boolean validateSequenceExists(SequenceExistsType value);
	boolean validateSetColumnRemarks(SetColumnRemarksType value);
	boolean validateSetTableRemarks(SetTableRemarksType value);
	boolean validateSql(SqlType value);
	boolean validateSqlCheck(SqlCheckType value);
	boolean validateSqlFile(SqlFileType value);
	boolean validateStop(StopType value);
	boolean validateTableExists(TableExistsType value);
	boolean validateTableIsEmpty(TableIsEmptyType value);
	boolean validateTagDatabase(TagDatabaseType value);
	boolean validateUpdate(UpdateType value);
	boolean validateViewExists(ViewExistsType value);
	boolean validateWhereParams(WhereParamsType value);
}
